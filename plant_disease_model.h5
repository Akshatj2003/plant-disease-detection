import os
import numpy as np
from sklearn.model_selection import train_test_split
from keras.models import Sequential
from keras.layers import Conv2D, MaxPooling2D, Flatten, Dense
from keras.optimizers import Adam
from keras.utils import to_categorical
from keras.preprocessing.image import img_to_array
import cv2
from PIL import Image

# Define the function to convert images to arrays
def convert_image_to_array(image_path):
    image = cv2.imread(image_path)
    if image is not None:
        image = cv2.resize(image, (256, 256))
        return img_to_array(image)
    return None

# Define your dataset directory
dataset_dir = r"path_to_your_dataset"  # Replace this with your actual dataset path

# Dataset class names
all_labels = ['Corn-Common_rust', 'Potato-Early_blight', 'Tomato-Bacterial_spot']
binary_labels = [0, 1, 2]

# Loading images and labels
image_list = []
label_list = []

for idx, label in enumerate(all_labels):
    label_dir = os.path.join(dataset_dir, label)
    for img_name in os.listdir(label_dir):
        img_path = os.path.join(label_dir, img_name)
        image = convert_image_to_array(img_path)
        if image is not None:
            image_list.append(image)
            label_list.append(binary_labels[idx])

# Convert to numpy arrays
image_list = np.array(image_list, dtype=np.float32) / 255.0  # Normalize
label_list = np.array(label_list)

# Split into training and test sets
x_train, x_test, y_train, y_test = train_test_split(image_list, label_list, test_size=0.2, random_state=42)

# One-hot encode the labels
y_train = to_categorical(y_train)
y_test = to_categorical(y_test)

# Building the model
model = Sequential([
    Conv2D(32, (3, 3), padding="same", input_shape=(256, 256, 3), activation="relu"),
    MaxPooling2D(pool_size=(3, 3)),
    Conv2D(16, (3, 3), padding="same", activation="relu"),
    MaxPooling2D(pool_size=(2, 2)),
    Flatten(),
    Dense(8, activation="relu"),
    Dense(3, activation="softmax")
])

# Compile the model
model.compile(loss='categorical_crossentropy', optimizer=Adam(0.0001), metrics=['accuracy'])

# Train the model
model.fit(x_train, y_train, validation_data=(x_test, y_test), epochs=50, batch_size=128)

# Save the model to disk
model.save('plant_disease_model.h5')
